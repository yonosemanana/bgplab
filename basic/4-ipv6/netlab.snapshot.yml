addressing:
  l2only: {}
  lan:
    ipv4: 172.16.0.0/16
    prefix: 24
  loopback:
    ipv4: 10.0.0.0/24
    prefix: 32
  mgmt:
    ipv4: 192.168.121.0/24
    mac: 08-4F-A9-00-00-00
    prefix: 24
    start: 100
  p2p:
    ipv4: 10.1.0.0/16
    ipv6: 2001:db8:42::/48
    prefix: 30
  router_id:
    ipv4: 10.0.0.0/24
    prefix: 32
  vrf_loopback:
    ipv4: 10.2.0.0/24
    prefix: 32
bgp:
  advertise_loopback: true
  community:
    ebgp:
    - standard
    ibgp:
    - standard
    - extended
  next_hop_self: true
defaults:
  _globals:
    _modlist:
    - bgp
    - bfd
    - dhcp
    - eigrp
    - evpn
    - gateway
    - isis
    - mpls
    - ospf
    - ripv2
    - sr
    - srv6
    - vlan
    - vrf
    - vxlan
  addressing:
    l2only: null
    lan:
      ipv4: 172.16.0.0/16
    loopback:
      ipv4: 10.0.0.0/24
    mgmt:
      ipv4: 192.168.121.0/24
      mac: 08-4F-A9-00-00-00
      start: 100
    p2p:
      ipv4: 10.1.0.0/16
    router_id:
      ipv4: 10.0.0.0/24
      prefix: 32
    vrf_loopback:
      ipv4: 10.2.0.0/24
      prefix: 32
  attributes:
    _v_entry:
      _description: Single network validation test (an entry in the validate dictionary)
      description: str
      devices:
        _subtype: device
        type: list
      exec: _v_option
      fail: str
      nodes:
        _subtype: node_id
        type: list
      pass: str
      plugin: str
      show: _v_option
      stop_on_error: bool
      valid: _v_option
      wait: int
      wait_msg: str
    _v_option:
      _alt_types:
      - str
      _description: 'A "show", "exec" or "valid" parameter in a network validation
        test. It''s a

        dictionary of device types with each value being a command to execute or

        expression to evaluate.

        '
      _keytype: device
      type: dict
    can_be_false:
    - link
    - interface
    exbs_timers:
      hold:
        max_value: 3600
        min_value: 3
        type: int
      keepalive:
        max_value: 300
        min_value: 1
        type: int
      min_hold:
        max_value: 3600
        min_value: 3
        type: int
    global:
      addressing: null
      defaults: null
      groups: null
      links: null
      module: null
      name: id
      nodes: null
      plugin:
        _subtype: str
        type: list
      provider: id
      tools:
        _subtype:
          create_empty: true
          type: dict
        type: dict
      validate:
        _keytype: id
        _subtype: _v_entry
        type: dict
      version: null
      vlans:
        _keytype: id
        _requires:
        - vlan
        _subtype: vlan
        type: dict
      vrfs:
        _keytype: id
        _requires:
        - vrf
        _subtype: vrf
        type: dict
    group:
      config: list
      device: device
      members:
        _subtype: id
        type: list
      module: list
      node_data:
        true_value: {}
        type: dict
      vars: dict
    interface:
      ifindex: int
      ifname: str
      ipv4:
        type: ipv4
        use: interface
      ipv6:
        type: ipv6
        use: interface
      node: node_id
    internal:
      Plugin: null
      Provider: null
      input: null
      message: str
      pools: dict
    link:
      bandwidth: int
      bridge: id
      disable: bool
      interfaces: null
      mtu:
        max_value: 65535
        min_value: 64
        type: int
      name: str
      pool: id
      prefix:
        _alt_types:
        - bool
        - prefix_str
        type: dict
      role: id
      type:
        type: str
        valid_values:
        - lan
        - p2p
        - stub
        - loopback
        - tunnel
        - vlan_member
      unnumbered: bool
      vlan_name: id
    link_internal:
      linkindex: int
      parentindex: int
    link_module_no_propagate:
    - vlan
    - dhcp
    link_no_propagate:
    - prefix
    - interfaces
    - gateway
    node:
      box: str
      config: list
      cpu: null
      device: device
      group: list
      id:
        max_value: 150
        min_value: 1
        type: int
      interfaces: list
      loopback:
        ipv4:
          type: ipv4
          use: prefix
        ipv6:
          type: ipv6
          use: prefix
      memory: int
      mgmt:
        ifname: str
        ipv4:
          type: ipv4
          use: id
        ipv6:
          type: ipv6
          use: id
        mac: str
      module:
        _subtype: id
        type: list
      mtu:
        max_value: 65535
        min_value: 64
        type: int
      name: str
      provider: id
      role: id
      unmanaged: bool
      vlans:
        _keytype: id
        _requires:
        - vlan
        _subtype: vlan
        type: dict
      vrfs:
        _keytype: id
        _requires:
        - vrf
        _subtype: vrf
        type: dict
    pool:
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
      mac: mac
      prefix:
        max_value: 32
        min_value: 1
        type: int
      prefix6:
        max_value: 128
        min_value: 1
        type: int
      start:
        min_value: 1
        type: int
      unnumbered: bool
    pool_no_copy:
    - start
    - prefix
    - mac
    prefix:
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
    vlan:
      _description: Global or node-level VLAN definition
      _namespace:
      - link
      id:
        max_value: 4095
        min_value: 1
        type: int
      links: list
      mode:
        type: str
        valid_values:
        - bridge
        - irb
        - route
      prefix: null
      vni:
        max_value: 16777215
        min_value: 1
        type: int
    vrf:
      _description: Global or node-level VRF definition
      _namespace:
      - link
      export: list
      id:
        min_value: 1
        type: int
      import: list
      links: list
      loopback: null
      rd: rd
  automation:
    ansible:
      cleanup:
      - ansible.cfg
      - hosts.yml
      - group_vars
      - host_vars
      - config
  bfd:
    attributes:
      global:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
      link:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
      node:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
    min_echo_rx: 0
    multiplier: 3
    supported_on:
    - arubacx
    - csr
    - cumulus
    - eos
    - frr
    - iosv
    - junos
    - none
    - nxos
    - srlinux
    - sros
    - unknown
    - vmx
    - vptx
    - vsrx
    - vyos
  bgp:
    advertise_loopback: true
    advertise_roles:
    - stub
    attributes:
      as_list:
        _keytype: int
        _subtype:
          members:
            _required: true
            _subtype: node_id
            type: list
          rr:
            _subtype: node_id
            type: list
        type: dict
      global:
        activate:
          ipv4:
          - ibgp
          - ebgp
          ipv6:
          - ibgp
          - ebgp
        advertise_loopback: bool
        advertise_roles: list
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
        as_list: dict
        bfd:
          _requires:
          - bfd
          type: bool
        community:
          _alt_types:
          - str
          - BoxList
          ebgp:
          - standard
          - extended
          - large
          - 2octet
          ibgp:
          - standard
          - extended
          - large
          - 2octet
        ebgp_role: str
        gtsm:
          max_value: 254
          min_value: 1
          true_value: 1
          type: int
        next_hop_self: bool
        password: str
        replace_global_as: bool
        rr_cluster_id:
          type: ipv4
          use: id
        rr_list: list
        session:
          apply:
            _list_to_dict: true
            ebgp:
              _alt_types:
              - NoneType
              create_empty: false
              true_value:
              - '*'
              type: list
            ibgp:
              _alt_types:
              - NoneType
              create_empty: false
              true_value:
              - '*'
              type: list
        sessions:
          ipv4:
          - ibgp
          - ebgp
          ipv6:
          - ibgp
          - ebgp
        tcp_ao:
          true_value: hmac-sha-1
          type: str
          valid_values:
          - aes-128-cmac
          - hmac-sha-1
          - ''
        timers: exbs_timers
      interface:
        allowas_in:
          max_value: 10
          min_value: 1
          true_value: 1
          type: int
        as_override: bool
        bfd:
          _requires:
          - bfd
          type: bool
        default_originate: bool
        gtsm:
          max_value: 254
          min_value: 1
          true_value: 1
          type: int
        local_as: asn
        passive: bool
        password: str
        remove_private_as:
          true_value:
          - 'on'
          type: list
          valid_values:
          - 'on'
          - all
          - replace
          - ingress
          - ingress-all
          - ingress-replace
        replace_global_as: bool
        tcp_ao:
          true_value: hmac-sha-1
          type: str
          valid_values:
          - aes-128-cmac
          - hmac-sha-1
          - ''
        timers: exbs_timers
      link:
        advertise: bool
        bfd:
          _requires:
          - bfd
          type: bool
        gtsm:
          max_value: 254
          min_value: 1
          true_value: 1
          type: int
        password: str
        rs: bool
        tcp_ao:
          true_value: hmac-sha-1
          type: str
          valid_values:
          - aes-128-cmac
          - hmac-sha-1
          - ''
        timers: exbs_timers
      node:
        activate:
          ipv4:
          - ibgp
          - ebgp
          ipv6:
          - ibgp
          - ebgp
        advertise_loopback: bool
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as:
          _required: true
          type: asn
        bfd:
          _requires:
          - bfd
          type: bool
        community:
          _alt_types:
          - str
          - BoxList
          ebgp:
          - standard
          - extended
          - large
          - 2octet
          ibgp:
          - standard
          - extended
          - large
          - 2octet
        default_originate: bool
        gtsm:
          max_value: 254
          min_value: 1
          true_value: 1
          type: int
        local_as: asn
        next_hop_self: bool
        originate:
          type: list
        passive: bool
        password: str
        replace_global_as: bool
        router_id:
          type: ipv4
          use: id
        rr: bool
        rr_cluster_id:
          type: ipv4
          use: id
        rs: bool
        session:
          apply:
            _list_to_dict: true
            ebgp:
              _alt_types:
              - NoneType
              create_empty: false
              true_value:
              - '*'
              type: list
            ibgp:
              _alt_types:
              - NoneType
              create_empty: false
              true_value:
              - '*'
              type: list
        sessions:
          ipv4:
          - ibgp
          - ebgp
          ipv6:
          - ibgp
          - ebgp
        tcp_ao:
          true_value: hmac-sha-1
          type: str
          valid_values:
          - aes-128-cmac
          - hmac-sha-1
          - ''
        timers: exbs_timers
      node_copy:
      - local_as
      - replace_global_as
      session:
        attr:
        - as_override
        - allowas_in
        - default_originate
        - password
        - passive
        - gtsm
        - timers
        - tcp_ao
        - bfd
        - remove_private_as
        - rs
      vrf:
        router_id:
          type: ipv4
          use: id
    community:
      ebgp:
      - standard
      ibgp:
      - standard
      - extended
    ebgp_role: external
    features:
      activate_af: Can control activation of individual address families
      community: Granular BGP community propagation
      ipv6_lla: Can run EBGP sessions over IPv6 link-local addresses
      local_as: Supports local-as functionality
      local_as_ibgp: Can use local-as to create IBGP sesssion
      rfc8950: Can run IPv4 AF over IPv6 LLA EBGP session
      vrf_local_as: Supports local-as within a VRF
    next_hop_self: true
    no_propagate:
      advertise_roles: null
      as_list: null
      ebgp_role: null
      rr_list: null
    supported_on:
    - arubacx
    - asav
    - bird
    - csr
    - cumulus
    - cumulus_nvue
    - dellos10
    - eos
    - frr
    - iosv
    - iosxr
    - junos
    - none
    - nxos
    - routeros
    - routeros7
    - sonic
    - srlinux
    - sros
    - unknown
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    warnings:
      igp_list:
      - ospf
      - eigrp
      - isis
      missing_igp: true
  const: {}
  daemons:
    bird:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        group_vars:
          docker_shell: bash -il
          netlab_show_command:
          - birdc
          - show $@
        image: netlab/bird:latest
      daemon_config:
        bgp: /etc/bird/bgp.mod.conf
        bird: /etc/bird/bird.conf
        ospf: /etc/bird/ospf.mod.conf
      description: BIRD Internet Routing Daemon
      features:
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
        ospf:
          unnumbered: false
      libvirt:
        image: null
      packages:
        bird: bird
      virtualbox:
        image: null
    dnsmasq:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        group_vars:
          docker_shell: bash -il
        image: netlab/dnsmasq:latest
      daemon_config:
        dhcp: /etc/dhcp.ignore
        dnsmasq: /etc/dnsmasq.conf
      description: BIRD Internet Routing Daemon
      dhcp:
        server: true
      features:
        dhcp:
          server: true
      libvirt:
        image: null
      module:
      - dhcp
      node:
        module:
        - dhcp
      packages:
        dnsmasq: dnsmasq
      virtualbox:
        image: null
  device: frr
  devices:
    arubacx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-aoscx/
        image: vrnetlab/vr-aoscx:20231110145644
        interface:
          name: eth{ifindex}
        mtu: 1500
        node:
          kind: vr-aoscx
      description: ArubaOS-CX
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          bfd: true
          default_originate: true
          gtsm: true
          local_as: true
          local_as_ibgp: false
          password: true
          remove_private_as: true
          timers: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        mpls:
          ldp: true
          vpn: true
        ospf: {}
        vlan:
          model: switch
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: arubanetworks.aoscx.aoscx
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_device_type: arubacx
      ifindex_offset: 1
      interface_name: 1/1/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/arubacx/
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=4096 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=ide
        image: aruba/cx
      loopback_interface_name: loopback {ifindex}
      mgmt_if: mgmt
      tunnel_interface_name: tunnel {ifindex}
    asav:
      description: Cisco ASAv
      external:
        image: none
      features:
        bgp: {}
        isis: {}
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant1
        ansible_connection: network_cli
        ansible_network_os: asa
        ansible_ssh_pass: vagrant1
        ansible_user: vagrant
      ifindex_offset: 0
      interface_name: GigabitEthernet0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/asav/
        create_iso: asav
        create_template: asav.xml.j2
        image: cisco/asav
      mgmt_if: Management0/0
    bird:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        group_vars:
          ansible_connection: docker
          ansible_user: root
          docker_shell: bash -il
          netlab_linux_distro: vanilla
          netlab_show_command:
          - birdc
          - show $@
        image: netlab/bird:latest
        mtu: 1500
        node:
          config_templates:
            hosts: /etc/hosts
          kind: linux
      daemon: true
      daemon_config:
        bgp: /etc/bird/bgp.mod.conf
        bgp@session: /etc/bird/bgp.session.conf
        bird: /etc/bird/bird.conf
        ospf: /etc/bird/ospf.mod.conf
      daemon_parent: linux
      description: BIRD Internet Routing Daemon
      external:
        image: none
      features:
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
          password: true
          rs: true
          rs_client: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
          relay: true
          server: true
        ospf:
          unnumbered: false
      graphite:
        icon: server
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: linux
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        docker_shell: sh -il
        netlab_device_type: bird
        netlab_lldp_enable: false
        netlab_net_tools: false
      interface_name: eth{ifindex}
      libvirt:
        group_vars:
          netlab_linux_distro: ubuntu
      mgmt_if: eth0
      packages:
        bird: bird
      role: host
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
    csr:
      description: Cisco CSR 1000v
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          as_override: true
          bfd: true
          community:
            extended:
            - extended
            standard:
            - standard
          default_originate: true
          gtsm: true
          local_as: true
          local_as_ibgp: true
          passive: true
          password: true
          remove_private_as: true
          rs: true
          rs_client: true
          tcp_ao: true
          timers: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        sr: {}
        vlan:
          model: switch
          svi_interface_name: BDI{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
        vxlan: {}
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: csr
        netlab_initial: always
      ifindex_offset: 2
      interface_name: GigabitEthernet{ifindex}
      libvirt:
        build: https://netlab.tools/labs/csr/
        create: virt-install --connect=qemu:///system --name=vm_box --os-variant=rhel4.0
          --arch=x86_64 --cpu host --vcpus=1 --hvm --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2
          --network=network:vagrant-libvirt,model=virtio --graphics none --import
        image: cisco/csr1000v
      loopback_interface_name: Loopback{ifindex}
      node:
        min_mtu: 1500
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: cisco/csr1000v
    cumulus:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
        image: networkop/cx:4.4.0
        mtu: 1500
        node:
          config_templates:
            interfaces: /etc/network/interfaces
          kind: cvx
          runtime: docker
      description: Cumulus VX 4.x or 5.x configured without NVUE
      evpn:
        _start_transit_vlan: 3900
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          as_override: true
          bfd: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          default_originate: true
          gtsm: true
          ipv6_lla: true
          local_as: true
          passive: true
          password: true
          remove_private_as: true
          rfc8950: true
          rs: true
          rs_client: true
          timers: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        ospf:
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        vlan:
          model: switch
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: cumulus
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_initial: always
        netlab_show_command:
        - sudo
        - vtysh
        - -c
        - show $@
      interface_name: swp{ifindex}
      libvirt:
        image: CumulusCommunity/cumulus-vx:4.4.0
        mtu: 1500
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      tunnel_interface_name: tun{ifindex}
      virtualbox:
        image: CumulusCommunity/cumulus-vx:4.3.0
        mtu: 1500
    cumulus_nvue:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
        image: networkop/cx:5.0.1
        mtu: 1500
        node:
          kind: cvx
          runtime: docker
      description: Cumulus VX 5.x configured with NVUE
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          rfc8950: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        ospf:
          unnumbered: true
        vrf: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: cumulus_nvue
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: cumulus
        ansible_user: cumulus
      interface_name: swp{ifindex}
      libvirt:
        image: CumulusCommunity/cumulus-vx:5.2.0
      mgmt_if: eth0
      virtualbox:
        image: CumulusCommunity/cumulus-vx:5.2.0
    dellos10:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-ftosv/
        image: vrnetlab/vr-ftosv
        interface:
          name: eth{ifindex}
        mtu: 1500
        node:
          kind: vr-ftosv
      description: Dell OS10
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          delay: 30
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        ospf: {}
        vlan:
          model: switch
          svi_interface_name: virtual-network{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: dellos10
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: ethernet1/1/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/dellos10/
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=2048 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=sata --disk
          path=hdb_OS10-installer.qcow2,format=qcow2,bus=virtio --disk path=hdc_OS10-platform.qcow2,format=qcow2,bus=virtio
        image: dell/os10
        pre_install: dellos10
      loopback_interface_name: loopback{ifindex}
      mgmt_if: mgmt1/1/1
    dnsmasq:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        group_vars:
          ansible_connection: docker
          ansible_user: root
          docker_shell: bash -il
          netlab_linux_distro: vanilla
        image: netlab/dnsmasq:latest
        mtu: 1500
        node:
          config_templates:
            hosts: /etc/hosts
          kind: linux
      daemon: true
      daemon_config:
        dhcp: /etc/dhcp.ignore
        dnsmasq: /etc/dnsmasq.conf
      daemon_parent: linux
      description: BIRD Internet Routing Daemon
      dhcp:
        server: true
      external:
        image: none
      features:
        dhcp:
          client:
            ipv4: true
            ipv6: true
          relay: true
          server: true
      graphite:
        icon: server
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: linux
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        docker_shell: sh -il
        netlab_device_type: dnsmasq
        netlab_lldp_enable: false
        netlab_net_tools: false
      interface_name: eth{ifindex}
      libvirt:
        group_vars:
          netlab_linux_distro: ubuntu
      mgmt_if: eth0
      module:
      - dhcp
      node:
        module:
        - dhcp
      packages:
        dnsmasq: dnsmasq
      role: host
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
    eos:
      bgp:
        _cprop_order:
        - standard
        - extended
        - large
        - link-bandwidth
      clab:
        build: https://netlab.tools/labs/ceos/
        group_vars:
          ansible_become: true
          ansible_become_method: enable
          ansible_ssh_pass: admin
          ansible_user: admin
        image: ceos:4.31.2F
        interface:
          name: et{ifindex}
        mgmt_if: Management0
        node:
          env:
            CLAB_MGMT_VRF: management
            INTFTYPE: et
          kind: ceos
      description: Arista vEOS VM or cEOS container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          as_override: true
          bfd: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          default_originate: true
          gtsm: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          passive: true
          password: true
          remove_private_as: true
          rfc8950: true
          rs_client: true
          tcp_ao:
          - libvirt
          - virtualbox
          - external
          timers: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
          relay: true
          server: true
          vrf: true
        evpn:
          asymmetrical_irb: true
          bundle:
          - vlan_aware
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: false
          passive: false
        sr: {}
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripv2: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: eos
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: Ethernet{ifindex}
      libvirt:
        build: https://netlab.tools/labs/eos/
        create_template: eos.xml.j2
        image: arista/veos
      loopback_interface_name: Loopback{ifindex}
      mgmt_if: Management1
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: arista/veos
    fortios:
      description: Fortinet FortiOS firewall
      external:
        image: none
      features:
        ospf: {}
      graphite:
        icon: firewall
      group_vars:
        ansible_connection: httpapi
        ansible_httpapi_port: 80
        ansible_httpapi_use_ssl: false
        ansible_httpapi_validate_certs: false
        ansible_network_os: fortinet.fortios.fortios
        ansible_password: admin
        ansible_user: admin
        collections:
        - fortinet.fortios
        netlab_console_connection: ssh
        vdom: root
      ifindex_offset: 2
      interface_name: port{ifindex}
      libvirt:
        image: fortinet/fortios
      mgmt_if: port1
    frr:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_mgmt_vrf: true
          netlab_show_command:
          - vtysh
          - -c
          - show $@
        image: quay.io/frrouting/frr:7.5.0
        mtu: 1500
        node:
          config_templates:
            daemons: /etc/frr/daemons
            hosts: /etc/hosts
          kind: linux
      description: FRR container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          as_override: true
          bfd: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          default_originate: true
          gtsm: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          passive: true
          password: true
          remove_private_as: true
          rfc8950: true
          rs: true
          rs_client: true
          timers: true
          vrf_local_as: true
        evpn:
          irb: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          keep_module: true
          ospfv2: true
          ospfv3: true
        vxlan:
          vtep6: true
      graphite:
        icon: router
      group_vars:
        ansible_network_os: frr
        ansible_python_interpreter: auto_silent
        netlab_initial: always
      interface_name: eth{ifindex}
      libvirt:
        group_vars:
          ansible_connection: paramiko
          ansible_ssh_pass: vagrant
          ansible_user: vagrant
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
        image: generic/ubuntu2004
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      tunnel_interface_name: tun{ifindex}
      virtualbox:
        group_vars:
          ansible_connection: paramiko
          ansible_ssh_pass: vagrant
          ansible_user: vagrant
        image: generic/ubuntu2004
    iosv:
      description: Cisco IOSv
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          as_override: true
          bfd: true
          community:
            extended:
            - extended
            standard:
            - standard
          default_originate: true
          gtsm: true
          local_as: true
          local_as_ibgp: true
          passive: true
          password: true
          remove_private_as: true
          rs: true
          rs_client: true
          timers: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: false
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: BVI{bvi}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: ios
        netlab_initial: always
      interface_name: GigabitEthernet0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/iosv/
        create_template: iosv.xml.j2
        image: cisco/iosv
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: cisco/iosv
    iosxr:
      clab:
        build: https://containerlab.dev/manual/kinds/xrd/
        group_vars:
          ansible_become_password: clab@123
          ansible_ssh_pass: clab@123
          ansible_user: clab
        image: ios-xr/xrd-control-plane:7.11.1
        interface:
          name: Gi0-0-0-{ifindex}
        mgmt_if: MgmtEth0/RP0/CPU0/0
        node:
          kind: cisco_xrd
          runtime: docker
      description: Cisco IOS XRv
      external:
        image: none
      features:
        bgp:
          activate_af: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        ospf:
          unnumbered: true
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: iosxr
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      ifindex_offset: 0
      interface_name: GigabitEthernet0/0/0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/iosxr/
        create: virt-install --connect=qemu:///system --network network=vagrant-libvirt,model=e1000
          --name=vm_box --cpu host --arch=x86_64 --vcpus=2 --ram=8192 --virt-type=kvm
          --disk path=vm.qcow2,format=qcow2,device=disk,bus=ide --graphics none --import
        image: cisco/iosxr
      mgmt_if: MgmtEth0/RP0/CPU0/0
    junos:
      description: Generic Juniper device (meta device, used only as parent)
      external:
        image: none
      features:
        bfd: {}
        bgp: {}
        initial:
          delay: 90
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        sr: {}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: Vagrant
        ansible_user: vagrant
        netlab_console_connection: ssh
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
    linux:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_linux_distro: vanilla
        image: python:3.9-alpine
        mtu: 1500
        node:
          config_templates:
            hosts: /etc/hosts
          kind: linux
      description: Generic Linux host
      external:
        image: none
      features:
        dhcp:
          client:
            ipv4: true
            ipv6: true
          relay: true
          server: true
      graphite:
        icon: server
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: linux
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        docker_shell: sh -il
        netlab_lldp_enable: false
        netlab_net_tools: false
      interface_name: eth{ifindex}
      libvirt:
        group_vars:
          netlab_linux_distro: ubuntu
        image: generic/ubuntu2004
      mgmt_if: eth0
      role: host
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
        image: generic/ubuntu2004
    none:
      clab:
        image: none
      description: Dummy device used to test topology transformation
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          bundle:
          - vlan_aware
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        sr: {}
        srv6: {}
        vlan:
          mixed_trunk: true
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: Vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
        vxlan: {}
      group_vars:
        ansible_connection: paramiko_ssh
        ansible_network_os: none
      interface_name: eth{ifindex}
      libvirt:
        image: none
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: none
    nxos:
      bfd:
        min_rx: 500
      description: Cisco Nexus 9300v
      evpn:
        _start_transit_vlan: 3800
      external:
        image: none
      features:
        bfd: {}
        bgp:
          allowas_in: true
          as_override: true
          default_originate: true
          gtsm: true
          passive: true
          password: true
          remove_private_as: true
          timers: true
        eigrp: {}
        evpn:
          irb: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        ospf:
          unnumbered: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan: {}
      graphite:
        icon: nexus5000
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: nxos
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: Ethernet1/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/nxos/
        create_template: nxos.xml.j2
        image: cisco/nexus9300v
      loopback_interface_name: loopback{ifindex}
      mgmt_if: mgmt0
      virtualbox:
        image: cisco/nexus9300v
    routeros:
      description: Mikrotik RouterOS version 6
      external:
        image: none
      features:
        bgp: {}
        mpls:
          ldp: true
          vpn: true
        ospf: {}
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}-{vlan.access_id}'
          svi_interface_name: bridge{vlan}
        vrf:
          bgp: true
          ospfv2: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: routeros
        ansible_ssh_pass: admin
        ansible_user: admin
      ifindex_offset: 2
      interface_name: ether{ifindex}
      libvirt:
        build: https://stefano.dscnet.org/a/mikrotik_vagrant/
        image: mikrotik/chr
      mgmt_if: ether1
    routeros7:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-ros/
        image: vrnetlab/vr-routeros:7.6
        interface:
          name: eth{ifindex-1}
        node:
          kind: vr-ros
      description: Mikrotik RouterOS version 7
      external:
        image: none
      features:
        bgp:
          allowas_in: true
          as_override: true
          default_originate: true
          password: true
          remove_private_as: true
        mpls:
          ldp: true
          vpn: true
        ospf: {}
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}-{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: routeros
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_device_type: routeros7
      ifindex_offset: 2
      interface_name: ether{ifindex}
      libvirt:
        build: https://netlab.tools/labs/routeros7/
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=256 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=ide
        image: mikrotik/chr7
      loopback_interface_name: loopback{ifindex}
      mgmt_if: ether1
    sonic:
      description: Sonic VM
      external:
        image: none
      features:
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          rfc8950: true
          vrf_local_as: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
      graphite:
        icon: router
      group_vars:
        ansible_network_os: frr
        ansible_python_interpreter: auto_silent
        netlab_device_type: sonic
      ifindex_offset: 0
      interface_name: Ethernet{ifindex * 4}
      libvirt:
        create_template: sonic.xml.j2
        group_vars:
          ansible_connection: paramiko
          ansible_ssh_pass: YourPaSsWoRd
          ansible_user: admin
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
        image: netlab/sonic
        mtu: 1500
      loopback_interface_name: Loopback{ifindex}
      mgmt_if: eth0
    srlinux:
      bfd:
        min_rx: 100
        min_tx: 100
      clab:
        group_vars:
          srlinux_grpc_port: 57400
        image: ghcr.io/nokia/srlinux:24.3.2
        interface:
          name: e1-{ifindex}
        node:
          kind: srl
          type: ixrd2
      description: Nokia SR Linux container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          as_override: true
          bfd: true
          default_originate: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          passive: true
          password: true
          remove_private_as: true
          rfc8950: true
          tcp_ao: false
          timers: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          ldp: true
        ospf:
          unnumbered: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: router
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb0.{vlan}
        vrf:
          bgp: true
          keep_module: true
          ospfv2: true
          ospfv3: true
        vxlan:
          requires:
          - evpn
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: srlinux
        ansible_ssh_pass: NokiaSrl1!
        ansible_user: admin
        netlab_console_connection: ssh
      interface_name: ethernet-1/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: mgmt0
      sr:
        ipv6_sid_offset: 100
        srgb_range_size: 1000
        srgb_range_start: 500000
    sros:
      bfd:
        min_rx: 100
        min_tx: 100
      clab:
        build: https://containerlab.dev/manual/kinds/vr-sros/
        group_vars:
          sros_grpc_port: 57400
        image: vrnetlab/vr-sros
        interface:
          name: eth{ifindex}
        mtu: 1500
        node:
          kind: vr-sros
          license: /Projects/SR_OS_VSR-SIM_license.txt
          type: sr-1
      description: Nokia SR OS container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          as_override: true
          default_originate: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          password: true
          rfc8950: false
          tcp_ao: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: false
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          strict_bfd: true
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        sr: {}
        srv6: {}
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}/1:{vlan.access_id}'
          svi_interface_name: svi.{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan:
          requires:
          - evpn
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko_ssh
        ansible_network_os: sros
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_console_connection: ssh
        sros_use_openconfig: false
      interface_name: 1/1/c{ifindex}
      loopback_interface_name: loopback.{ifindex}
      mgmt_if: A/1
      sr:
        ipv6_sid_offset: 100
        srgb_range_size: 1000
        srgb_range_start: 500000
    unknown:
      description: Generic Unknown Device
      features:
        bfd: {}
        bgp: {}
        evpn: {}
        gateway: {}
        isis: {}
        mpls: {}
        ospf: {}
        sr: {}
        srv6: {}
        vlan: {}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
        vxlan: {}
      graphite:
        icon: server
      interface_name: eth{ifindex}
      mgmt_if: eth0
    vmx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vmx/
        image: vrnetlab/vr-vmx:18.2R1.9
        interface:
          name: eth{ifindex+1}
        node:
          kind: vr-vmx
      description: Juniper vMX container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          as_override: true
          bfd: true
          passive: true
          password: true
          timers: true
        initial:
          delay: 90
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: admin@123
        ansible_user: admin
        netlab_console_connection: ssh
        netlab_device_type: vmx
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
    vptx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vjunosevolved/
        group_vars:
          ansible_ssh_pass: admin@123
          ansible_user: admin
        image: vrnetlab/vr-vjunosevolved:23.2R1-S1.8-EVO
        interface:
          name: eth{ifindex+1}
        mtu: 1500
        node:
          kind: juniper_vjunosevolved
      description: Juniper vPTX
      external:
        image: none
      features:
        bfd: {}
        bgp:
          as_override: true
          bfd: true
          passive: true
          password: true
          timers: true
        evpn: {}
        initial:
          delay: 90
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: switch
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: Vagrant
        ansible_user: vagrant
        netlab_console_connection: ssh
        netlab_device_type: vptx
      ifindex_offset: 0
      interface_name: et-0/0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/vptx/
        create_template: vptx.xml.j2
        image: juniper/vptx
        pre_install: vptx
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: re0:mgmt-0
    vsrx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vsrx/
        group_vars:
          ansible_ssh_pass: admin@123
          ansible_user: admin
        image: vrnetlab/vr-vsrx:23.1R1.8
        interface:
          name: eth{ifindex+1}
        node:
          kind: vr-vsrx
      description: Juniper vSRX 3.0
      external:
        image: none
      features:
        bfd: {}
        bgp:
          as_override: true
          bfd: true
          passive: true
          password: true
          timers: true
        initial:
          delay: 90
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        sr: {}
        vlan:
          mixed_trunk: false
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: firewall
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: Vagrant
        ansible_user: vagrant
        netlab_console_connection: ssh
        netlab_device_type: vsrx
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/vsrx/
        create: virt-install --connect=qemu:///system --name=vm_box --os-variant=freebsd10.0
          --arch=x86_64 --cpu host --vcpus=2 --hvm --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2
          --disk path=bootstrap.iso,device=cdrom,bus=ide --boot hd --network=network:vagrant-libvirt,model=virtio
          --graphics none --import
        create_iso: vsrx
        image: juniper/vsrx3
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
      virtualbox:
        image: juniper/vsrx3
    vyos:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: vyos
        image: ghcr.io/sysoleg/vyos-container
        mtu: 1500
        node:
          binds:
            /lib/modules: /lib/modules
          kind: linux
      description: VyOS VM/container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          as_override: true
          default_originate: true
          ipv6_lla: true
          local_as: true
          password: true
          remove_private_as: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis: {}
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: br0.{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan:
          vtep6: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: vyos
        ansible_ssh_pass: vyos
        ansible_user: vyos
        docker_shell: su - vyos
      interface_name: eth{ifindex}
      libvirt:
        image: vyos/current
      loopback_interface_name: dum{ifindex}
      mgmt_if: eth0
  dhcp:
    attributes:
      interface:
        client:
          default: bool
          ipv4: bool
          ipv6: bool
        server:
          _subtype: node_id
          type: list
        vrf: str
      link:
        subnet:
          ipv4: bool
          ipv6: bool
      node:
        server: bool
        vrf: bool
    config_after:
    - vlan
    - vrf
    - vxlan
    features:
      ipv4: IPv4 DHCP client
      ipv6: IPv6 DHCP client
      relay: DHCP relay (IPv4 and IPv6)
      server: DHCP server
      vrf: Inter-VRF DHCP relay
    supported_on:
    - bird
    - csr
    - cumulus
    - dnsmasq
    - eos
    - iosv
    - linux
    transform_after:
    - vlan
    - vrf
    - ospf
    - eigrp
    - isis
    - bgp
  eigrp:
    as: 1
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
      link:
        passive: bool
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
    config_after:
    - vlan
    - dhcp
    supported_on:
    - csr
    - iosv
    - nxos
    transform_after:
    - vlan
    - vrf
    warnings:
      inactive: true
  evpn:
    attributes:
      bundle:
      - vlan_aware
      - vlan
      - port
      - port_vlan
      global:
        as: asn
        session:
        - ibgp
        - ebgp
        start_transit_vni:
          max_value: 16777215
          min_value: 1
          type: int
        transport:
          type: str
          valid_values:
          - evpn
          - mpls
        vlans: list
        vrfs: list
      node:
        session:
        - ibgp
        - ebgp
        vlans: list
        vrfs: list
      vlan:
        evi: rd
        export: list
        import: list
        rd: rd
      vrf:
        bundle:
          type: str
          valid_values:
          - vlan_aware
          - vlan
          - port
          - port_vlan
        transit_vni:
          _alt_types:
          - str
          - bool
          max_value: 16777215
          min_value: 1
          type: int
    config_after:
    - vlan
    - vxlan
    - vrf
    features:
      asymmetrical_irb: Support asymmetrical IRB (routing on ingress, bridging on
        egress)
      bundle: EVPN bundle service support
      irb: Supports symmetrical IRB (routing on ingress and egress)
    no_propagate:
    - start_transit_vni
    - transport
    - vlan_bundle_service
    - as
    requires:
    - bgp
    session:
    - ibgp
    start_transit_vni: 200000
    supported_on:
    - arubacx
    - cumulus
    - dellos10
    - eos
    - frr
    - none
    - nxos
    - srlinux
    - sros
    - unknown
    - vptx
    - vyos
    transform_after:
    - vlan
    - vxlan
    - vrf
  gateway:
    anycast:
      mac: 0200.cafe.00ff
      unicast: true
    attributes:
      anycast:
      - unicast
      - mac
      can_be_true:
      - link
      global:
        anycast:
          mac: mac
          unicast: bool
        id: int
        protocol:
          type: str
          valid_values:
          - anycast
          - vrrp
        vrrp:
          group: int
          preempt: bool
          priority: int
      link:
        anycast:
          mac: mac
          unicast: bool
        id: int
        ipv4:
          type: ipv4
          use: interface
        protocol:
          type: str
          valid_values:
          - anycast
          - vrrp
        vrrp:
          group: int
          preempt: bool
          priority: int
      link_to_neighbor: true
      node:
        anycast:
          mac: mac
          unicast: bool
        protocol: null
        vrrp:
          group: int
          preempt: bool
          priority: int
      protocols:
      - anycast
      - vrrp
      vrrp:
      - group
    config_after:
    - vlan
    - vrf
    features:
      protocol: Supported FHRP protocols
    id: -2
    no_propagate:
    - id
    - protocol
    protocol: anycast
    supported_on:
    - arubacx
    - csr
    - cumulus
    - dellos10
    - eos
    - iosv
    - none
    - nxos
    - srlinux
    - sros
    - unknown
    - vyos
    transform_after:
    - vlan
    - vrf
    - ospf
    - isis
    - eigrp
    vrrp:
      group: 1
  groups:
    external:
      device: cumulus
      members: []
  hints:
    bgp:
      igp: 'Add a supported IGP (ospf, isis, eigrp) to the list of modules.

        '
    cli:
      recreate: netlab transforms lab topology into device- and platform data and
        stores the results in a snapshot file that is used by most netlab commands.
        Changes to source files (including lab topology or defaults) are not automatically
        reflected in the snapshot file. Use 'netlab create' or 'netlab up' to create
        a new snapshot file.
    evpn:
      asn: 'You could use the global ''bgp.as'' parameter to specify the AS to use
        in EVPN route targets. ''bgp.as'' specified on individual nodes or groups
        will not work. You can also specify the global AS used by EVPN in ''vrf.as''
        parameter if you use VRFs, or in ''evpn.as'' parameter if you use EVPN in
        bridging-only scenarios.

        '
      irb_group: 'All VLANs that are part of a VRF using asymmetric IRB have to be
        present on all nodes using that VRF. The easiest way to achieve that is to
        create a group with all participating nodes and list VLANs in the ''vlans''
        attribute of that group

        '
      node_bundle: 'evpn.bundle attribute can be used only in global VRF definition

        '
    quirks:
      junos_lb: 'Junos devices cannot have more than one loopback interface per routing
        instance

        '
    report:
      source: 'A report can be specified in a file with .j2 suffix within ''reports''
        subdirectory in package-, system-, user- or current directory. You can also
        specify a report in a defaults.outputs.report setting.

        '
    vrf:
      inactive: 'A globally-defined VRF is not used on a node unless that node is
        attached to a VRF link, or has the VRF listed in the node ''vrfs'' dictionary
        and uses VRF loopbacks.

        '
  initial:
    features:
      ipv4:
        unnumbered: Unnumbered IPv4 interfaces
      ipv6:
        lla: IPv6 LLA-only interfaces
      system_mtu: System-wide MTU setting
  isis:
    area: '49.0001'
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area: net
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
      link:
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        cost:
          max_value: 16777215
          min_value: 1
          type: int
        metric:
          max_value: 16777215
          min_value: 1
          type: int
        network_type:
          _alt_types:
          - bool
          type: str
          valid_values:
          - point-to-point
        passive: bool
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area: net
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        net: net
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
    config_after:
    - vlan
    - dhcp
    features:
      unnumbered:
        ipv4: IPv4 unnumbered interfaces
        ipv6: IPv6 unnumbered interfaces
        network: multi-access unnumbered links
    supported_on:
    - asav
    - csr
    - eos
    - frr
    - iosv
    - iosxr
    - junos
    - none
    - nxos
    - srlinux
    - sros
    - unknown
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    - vrf
    type: level-2
    warnings:
      inactive: true
  module:
  - bgp
  mpls:
    attributes:
      global:
        6pe:
          true_value:
          - ibgp
          type: list
        bgp:
          _alt_types:
          - bool
          - BoxList
          disable_unlabeled: bool
          explicit_null: bool
          ipv4:
            true_value:
            - ibgp
            - ebgp
            type: list
          ipv6:
            true_value:
            - ibgp
            - ebgp
            type: list
        ldp:
          _alt_types:
          - bool
          advertise: list
          explicit_null: bool
          igp_sync: bool
          router_id:
            type: ipv4
            use: id
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
      link:
        ldp: bool
      node:
        6pe:
          true_value:
          - ibgp
          type: list
        bgp:
          _alt_types:
          - bool
          - BoxList
          disable_unlabeled: bool
          explicit_null: bool
          ipv4:
            true_value:
            - ibgp
            - ebgp
            type: list
          ipv6:
            true_value:
            - ibgp
            - ebgp
            type: list
        ldp:
          _alt_types:
          - bool
          advertise: list
          explicit_null: bool
          igp_sync: bool
          router_id:
            type: ipv4
            use: id
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
    config_after:
    - vlan
    - ospf
    - isis
    - bgp
    features:
      6pe: Supports 6PE
      bgp: Supports BGP Labeled Unicast address family
      ldp: Can run LDP within an autonomous system
      vpn: Supports MPLS/VPN
    ldp: true
    supported_on:
    - arubacx
    - csr
    - eos
    - frr
    - iosv
    - junos
    - none
    - routeros
    - routeros7
    - srlinux
    - sros
    - unknown
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    - bgp
    - vrf
  multilab:
    change:
      addressing:
        mgmt:
          _bridge: nl_mgmt_{id}
          _network: nl_mgmt_{id}
          ipv4: 192.168.{id}.0/24
      defaults:
        name: ml_{id}
        providers:
          libvirt:
            tunnel_id: '{id}'
            vifprefix: vgif_{id}
      name: ml_{id}
  name: ipv6
  ospf:
    area: 0.0.0.0
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area:
          type: ipv4
          use: id
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
          strict: bool
          strict_delay:
            max_value: 600
            min_value: 0
            type: int
        process:
          min_value: 1
          type: int
        reference_bandwidth:
          min_value: 1
          type: int
      link:
        area:
          type: ipv4
          use: id
        bfd: bool
        cost:
          max_value: 65534
          min_value: 1
          type: int
        network_type:
          type: str
          valid_values:
          - point-to-point
          - point-to-multipoint
          - broadcast
          - non-broadcast
        passive: bool
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area:
          type: ipv4
          use: id
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
          strict: bool
          strict_delay:
            max_value: 600
            min_value: 0
            type: int
        process:
          min_value: 1
          type: int
        reference_bandwidth:
          min_value: 1
          type: int
        router_id:
          type: ipv4
          use: id
      node_copy:
      - area
      vrf:
        active: bool
        router_id:
          type: ipv4
          use: id
      vrf_aware:
      - area
      vrf_copy:
      - area
      - router_id
      - reference_bandwidth
    config_after:
    - vlan
    - dhcp
    features:
      strict_bfd: Supports strict BFD mode (RFC 9355)
      unnumbered: Can run OSPFv2 over unnumbered IPv4 interfaces
    supported_on:
    - arubacx
    - bird
    - csr
    - cumulus
    - cumulus_nvue
    - dellos10
    - eos
    - fortios
    - frr
    - iosv
    - iosxr
    - junos
    - none
    - nxos
    - routeros
    - routeros7
    - srlinux
    - sros
    - unknown
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    - vrf
    warnings:
      inactive: true
  outputs:
    d2:
      as_clusters: true
      ebgp:
        source-arrowhead:
          shape: arrow
        style:
          stroke: '#b21a1a'
          stroke-width: 4
        target-arrowhead:
          shape: arrow
      ibgp:
        source-arrowhead:
          shape: arrow
        style:
          stroke: '#613913'
          stroke-width: 4
        target-arrowhead:
          shape: arrow
      interface_labels: false
      lan:
        shape: rectangle
        style:
          border-radius: 8
          font-size: 20
      node_address_label: true
      router:
        shape: oval
        style:
          font-size: 20
      rr_sessions: true
      switch:
        shape: hexagon
        style:
          font-size: 20
    graph:
      as_clusters: true
      colors:
        as: '#e8e8e8'
        ebgp: '#b21a1a'
        ibgp: '#613913'
        node: '#ff9f01'
        stub: '#d1bfab'
      interface_labels: false
      margins:
        as: 16
      node_address_label: true
    provider: {}
    yaml=netlab:
      snapshot:
        yml: {}
  paths:
    collect:
      dirs:
      - /home/alper/.local/lib/python3.10/site-packages/netsim/ansible/tasks/fetch-config
    custom:
      dirs:
      - /home/alper/Git/bgplab/basic/4-ipv6
      - /home/alper/.netlab
      - /home/alper/.local/lib/python3.10/site-packages/netsim/extra
      files:
      - '{{ custom_config + ''/'' + inventory_hostname + ''.'' + netlab_device_type
        + ''-'' + node_provider + ''.j2'' }}'
      - '{{ custom_config + ''/'' + inventory_hostname + ''.'' + netlab_device_type
        + ''.j2'' }}'
      - '{{ custom_config + ''/'' + inventory_hostname + ''.j2'' }}'
      - '{{ custom_config + ''/'' + inventory_hostname + ''.cfg'' }}'
      - '{{ custom_config + ''/'' + netlab_device_type + ''-'' + node_provider + ''.j2''
        }}'
      - '{{ custom_config + ''/'' + netlab_device_type + ''.j2'' }}'
      - '{{ custom_config + ''/'' + ansible_network_os + ''-'' + node_provider + ''.j2''
        }}'
      - '{{ custom_config + ''/'' + ansible_network_os + ''.j2'' }}'
      - '{{ custom_config + ''.'' + inventory_hostname + ''.'' + netlab_device_type
        + ''.j2'' }}'
      - '{{ custom_config + ''.'' + inventory_hostname + ''.'' + ansible_network_os
        + ''.j2'' }}'
      - '{{ custom_config + ''.'' + inventory_hostname + ''.j2'' }}'
      - '{{ custom_config + ''.'' + netlab_device_type + ''.j2'' }}'
      - '{{ custom_config + ''.'' + ansible_network_os + ''.j2'' }}'
      - '{{ custom_config }}'
      - '{{ custom_config + ''.j2'' }}'
      tasks:
      - '{{ custom_config }}/deploy-{{ inventory_hostname }}.yml'
      - '{{ custom_config }}/deploy.{{ netlab_device_type }}-{{ node_provider }}.yml'
      - '{{ custom_config }}/deploy.{{ netlab_device_type }}.yml'
      - '{{ custom_config }}/deploy.{{ ansible_network_os }}-{{ node_provider }}.yml'
      - '{{ custom_config }}/deploy.{{ ansible_network_os }}.yml'
      - '{{ custom_config }}/deploy.yml'
    deploy:
      dirs:
      - /home/alper/.local/lib/python3.10/site-packages/netsim/ansible/tasks
      files:
      - '{{ netlab_device_type }}/{{ config_module }}-{{ provider|default(netlab_provider)
        }}.yml'
      - '{{ netlab_device_type }}/{{ config_module }}.yml'
      - deploy-config/{{ netlab_device_type }}-{{ provider|default(netlab_provider)
        }}.yml
      - deploy-config/{{ netlab_device_type }}.yml
      - '{{ ansible_network_os }}/{{ config_module }}-{{ provider|default(netlab_provider)
        }}.yml'
      - '{{ ansible_network_os }}/{{ config_module }}.yml'
      - deploy-config/{{ ansible_network_os }}-{{ provider|default(netlab_provider)
        }}.yml
      - deploy-config/{{ ansible_network_os }}.yml
      tasks_generic:
      - deploy-config/{{ netlab_device_type }}-{{ node_provider }}.yml
      - deploy-config/{{ netlab_device_type }}.yml
      - deploy-config/{{ ansible_network_os }}-{{ node_provider }}.yml
      - deploy-config/{{ ansible_network_os }}.yml
    plugin:
    - /home/alper/Git/bgplab/basic/4-ipv6
    - /home/alper/.netlab
    - /home/alper/.local/lib/python3.10/site-packages/netsim/extra
    ready:
      dirs:
      - /home/alper/.local/lib/python3.10/site-packages/netsim/ansible/tasks/readiness-check
      files:
      - '{{netlab_device_type}}-{{provider|default(netlab_provider)}}.yml'
      - '{{netlab_device_type}}.yml'
      - '{{ansible_network_os}}-{{provider|default(netlab_provider)}}.yml'
      - '{{ansible_network_os}}.yml'
    t_files:
      files:
      - '{{config_module}}/{{netlab_device_type}}-{{provider|default(netlab_provider)}}.j2'
      - '{{config_module}}/{{netlab_device_type}}.j2'
      - '{{config_module}}.{{netlab_device_type}}.j2'
      - '{{config_module}}/{{ansible_network_os}}-{{provider|default(netlab_provider)}}.j2'
      - '{{config_module}}/{{ansible_network_os}}.j2'
      - '{{config_module}}.{{ansible_network_os}}.j2'
      - '{{netlab_device_type}}/{{config_module}}.j2'
    templates:
      dirs:
      - /home/alper/.local/lib/python3.10/site-packages/netsim/ansible/templates
      - /home/alper/.local/lib/python3.10/site-packages/netsim/daemons
    validate:
    - /home/alper/.local/lib/python3.10/site-packages/netsim/validate
  plugin: []
  ports:
    http: 80
    https: 443
    netconf: 830
    ssh: 22
  provider: clab
  providers:
    clab:
      act_probe: docker ps
      act_title: Running containers
      attributes:
        interface:
          name: str
        link:
          uplink: str
        node:
          _keys:
            binds: null
            cmd: str
            config_templates: null
            env: null
            image: str
            kind: str
            license: str
            ports: list
            runtime: str
            srl-agents: null
            startup-config: str
            type: str
          type: dict
      bridge_type: bridge
      cleanup:
      - clab.yml
      - clab_files
      config: clab.yml
      description: containerlab with Docker
      node_config_attributes:
      - type
      - cmd
      - env
      - ports
      probe:
      - cmd: containerlab version
        err: Containerlab is not installed
      - cmd:
        - bash
        - -c
        - '[[ `containerlab version|awk ''/version/ {print $2}''` > ''0.42'' ]] &&
          echo OK'
        err: Containerlab version is too old, please upgrade to 0.43 or later
      runtime: docker
      start: sudo -E containerlab deploy -t clab.yml
      stop: sudo -E containerlab destroy --cleanup -t clab.yml
      template: clab.j2
    external:
      cleanup:
      - external.txt
      config: external.txt
      description: External devices
      probe: []
      start: []
      stop: []
      template: external.j2
    libvirt:
      act_probe: virsh list
      act_title: KVM/libvirt domains (virtual machines)
      attributes:
        global:
          providers: null
        link:
          permanent: bool
          provider: dict
          public:
            true_value: bridge
            type: str
            valid_values:
            - bridge
            - vepa
            - passthrough
            - private
          uplink: str
        node:
          image: str
          nic_adapter_count: int
          nic_model_type: str
      clab:
        filename: clab-augment.yml
        recreate_config: true
        start: sudo -E containerlab deploy -t clab-augment.yml
        stop: sudo -E containerlab destroy --cleanup -t clab-augment.yml
      cleanup:
      - Vagrantfile
      config: Vagrantfile
      description: Vagrant with libvirt/KVM
      probe:
      - cmd: stat /usr/sbin/kvm-ok
        err: KVM is not installed or does not include kvm-ok utility
      - cmd: /usr/sbin/kvm-ok
        err: KVM is not enabled or not working properly
      - cmd: which virsh
        err: libvirt is not installed
      - cmd: which vagrant
        err: vagrant is not installed
      - cmd:
        - bash
        - -c
        - vagrant plugin list|grep vagrant-libvirt
        err: vagrant-libvirt plugin is not installed
      - cmd: virsh net-list
        err: You don't have access to virsh networking, your user should be in libvirt
          group
      start: vagrant up --provider libvirt
      stop: vagrant destroy -f
      tunnel_id: 1
      vifprefix: vgif
    virtualbox:
      cleanup:
      - Vagrantfile
      config: Vagrantfile
      description: Vagrant with Virtualbox
      forwarded:
        http: 8000
        netconf: 3000
        ssh: 2000
      inventory:
        ansible_host: 127.0.0.1
      inventory_port_map:
        ssh: ansible_port
      probe:
      - VBoxManage -h
      - vagrant plugin list
      start: vagrant up --provider virtualbox
      stop: vagrant destroy -f
  ripv2:
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
      link:
        passive: bool
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
      vrf:
        active: bool
    config_after:
    - vlan
    - dhcp
    features:
      ipv4: RIPv2
      ipv6: RIPng
      passive: Passive interfaces
    supported_on:
    - csr
    - cumulus
    - eos
    - frr
    - iosv
    - sros
    transform_after:
    - vlan
    - vrf
    warnings:
      inactive: true
  sources:
    extra:
    - ../../defaults.yml
    list: []
    system: []
    user: []
  sr:
    attributes:
      global:
        ipv6_sid_offset:
          min_value: 1
          type: int
        srgb_range_size:
          min_value: 1
          type: int
        srgb_range_start:
          min_value: 1
          type: int
      node:
        ipv6_sid_offset:
          min_value: 1
          type: int
        srgb_range_size:
          min_value: 1
          type: int
        srgb_range_start:
          min_value: 1
          type: int
    requires:
    - isis
    supported_on:
    - csr
    - eos
    - junos
    - none
    - srlinux
    - sros
    - unknown
    - vmx
    - vptx
    - vsrx
    transform_after:
    - vlan
  srv6:
    address_families:
    - ipv4
    - ipv6
    attributes:
      global:
        address_families:
          true_value:
          - ipv4
          - ipv6
          type: list
        bgp: bool
        isis: bool
        locator: str
      node:
        address_families:
          true_value:
          - ipv4
          - ipv6
          type: list
        bgp: bool
        isis: bool
        locator: str
        transit_only: bool
    bgp: false
    isis: true
    locator: 2001:db8:aaaa
    requires:
    - isis
    supported_on:
    - none
    - sros
    - unknown
    transform_after:
    - vlan
  tools:
    graphite:
      attributes:
        node:
          icon: str
      config:
      - dest: graphite-default.json
        render: graphite
      docker:
        down: docker kill '{name}_graphite'
        message: Open http://{sys.ipaddr}:{ 8080 + defaults.multilab.id if defaults.multilab.id
          else 8080 }/graphite/ in your browser
        up: docker run -d --rm {sys.docker_net} --mount type=bind,source="$(pwd)/graphite/graphite-default.json",target=/htdocs/default/default.json,readonly
          -p { 8080 + defaults.multilab.id if defaults.multilab.id else 8080 }:80
          --name '{name}_graphite' netreplica/graphite:v0.3.0
      runtime: docker
    suzieq:
      config:
      - dest: suzieq-inventory.yml
        template: suzieq.inventory.j2
      - dest: suzieq-cfg.yml
        template: suzieq-cfg.yml
      docker:
        cleanup: docker volume rm '{name}_suzieq'
        connect: docker exec -it '{name}_suzieq' /usr/local/bin/suzieq-cli
        down: docker kill '{name}_suzieq'
        message: Use 'netlab connect suzieq' to start SuzieQ CLI
        up: docker run --rm -itd --name '{name}_suzieq' {sys.docker_net} -v '{name}_suzieq':/parquet
          -v './suzieq':/suzieq netenglabs/suzieq-demo -c 'sq-poller -I /suzieq/suzieq-inventory.yml'
      runtime: docker
  vlan:
    attributes:
      global:
        mode:
          type: str
          valid_values:
          - bridge
          - irb
          - route
      keep_subif:
        ifindex: null
        ifname: null
        type: null
        vlan: null
      link:
        access: id
        mode:
          type: str
          valid_values:
          - route
        native: id
        trunk: null
      node:
        mode: null
      phy_ifattr:
        _selfloop_ifindex: null
        bridge: null
        ifindex: null
        ifname: null
        linkindex: null
        mtu: null
        parentindex: null
        type: null
        vlan: null
      vlan_no_propagate:
        evpn: null
        id: null
        mode: null
        prefix: null
        vni: null
      vlan_svi_no_propagate:
        gateway: null
    features:
      mixed_trunk: Supports trunk interfaces with mixed routed/bridged VLANs
      model: Conceptual device configuration model
      native_routed: Supports native layer-3 interface on a trunk port
    mode: irb
    no_propagate:
    - start_vlan_id
    - mode
    start_vlan_id: 1000
    supported_on:
    - arubacx
    - csr
    - cumulus
    - dellos10
    - eos
    - frr
    - iosv
    - none
    - nxos
    - routeros
    - routeros7
    - srlinux
    - sros
    - unknown
    - vmx
    - vptx
    - vsrx
    - vyos
  vrf:
    as: 65000
    attributes:
      global:
        as: asn
        loopback: bool
      interface: id
      link: id
      node:
        as: asn
        loopback: bool
    config_after:
    - vlan
    - ospf
    - isis
    - bgp
    - mpls
    supported_on:
    - arubacx
    - csr
    - cumulus
    - cumulus_nvue
    - dellos10
    - eos
    - frr
    - iosv
    - junos
    - none
    - nxos
    - routeros
    - routeros7
    - srlinux
    - sros
    - unknown
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    - bgp
    warnings:
      inactive: true
  vxlan:
    attributes:
      global:
        domain: id
        flooding:
          type: str
          valid_values:
          - static
          - evpn
        use_v6_vtep: bool
        vlans: list
      link:
        vtep: bool
      node:
        domain: id
        flooding:
          type: str
          valid_values:
          - static
          - evpn
        vlans: list
    config_after:
    - vrf
    domain: global
    features:
      vtep6: VXLAN over IPv6
    flooding: static
    no_propagate:
    - use_v6_vtep
    - start_vni
    requires:
    - vlan
    start_vni: 100000
    supported_on:
    - arubacx
    - csr
    - cumulus
    - dellos10
    - eos
    - frr
    - none
    - nxos
    - srlinux
    - sros
    - unknown
    - vyos
    transform_after:
    - vlan
    - vrf
    use_v6_vtep: false
groups:
  as65000:
    members:
    - rtr
  as65100:
    members:
    - x1
  as65101:
    members:
    - x2
  external:
    device: cumulus
    members:
    - x1
    - x2
input:
- /home/alper/Git/bgplab/basic/4-ipv6/topology.1.6.4.yml
- /home/alper/Git/bgplab/defaults.yml
- package:topology-defaults.yml
links:
- interfaces:
  - ifindex: 1
    ifname: eth1
    ipv4: 10.1.0.1/30
    ipv6: 2001:db8:42::1/64
    node: rtr
  - bgp:
      default_originate: true
    ifindex: 1
    ifname: swp1
    ipv4: 10.1.0.2/30
    ipv6: 2001:db8:42::2/64
    node: x1
  linkindex: 1
  node_count: 2
  prefix:
    ipv4: 10.1.0.0/30
    ipv6: 2001:db8:42::/64
  provider:
    clab: true
  role: external
  type: p2p
- interfaces:
  - ifindex: 2
    ifname: eth2
    ipv4: 10.1.0.5/30
    ipv6: 2001:db8:42:1::1/64
    node: rtr
  - bgp:
      default_originate: true
    ifindex: 1
    ifname: swp1
    ipv4: 10.1.0.6/30
    ipv6: 2001:db8:42:1::2/64
    node: x2
  linkindex: 2
  node_count: 2
  prefix:
    ipv4: 10.1.0.4/30
    ipv6: 2001:db8:42:1::/64
  provider:
    clab: true
  role: external
  type: p2p
message: 'The "Configure BGP for IPv6" lab is ready. Connect to your router

  with "netlab connect rtr".


  Have fun!


  You can use the ''netlab validate'' command to check whether you successfully

  completed the lab exercise.

  '
module:
- bgp
name: ipv6
nodes:
  rtr:
    af:
      ipv4: true
      ipv6: true
    bgp:
      advertise_loopback: true
      as: 65000
      community:
        ebgp:
        - standard
        - large
        ibgp:
        - standard
        - large
        - extended
        ibgp_localas:
        - standard
        - large
        - extended
      ipv4: true
      neighbors:
      - activate:
          ipv4: true
        as: 65100
        ifindex: 1
        ipv4: 10.1.0.2
        name: x1
        type: ebgp
      - activate:
          ipv4: true
        as: 65101
        ifindex: 2
        ipv4: 10.1.0.6
        name: x2
        type: ebgp
      next_hop_self: true
      originate:
      - 192.168.42.0/24
      router_id: 10.0.0.1
      sessions:
        ipv4:
        - ibgp
        - ebgp
        ipv6: []
    box: quay.io/frrouting/frr:7.5.0
    clab:
      binds:
      - clab_files/rtr/daemons:/etc/frr/daemons
      - clab_files/rtr/hosts:/etc/hosts
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      kind: linux
    device: frr
    hostname: clab-ipv6-rtr
    id: 1
    interfaces:
    - ifindex: 1
      ifname: eth1
      ipv4: 10.1.0.1/30
      ipv6: 2001:db8:42::1/64
      linkindex: 1
      mtu: 1500
      name: rtr -> x1
      neighbors:
      - bgp:
          default_originate: true
        ifname: swp1
        ipv4: 10.1.0.2/30
        ipv6: 2001:db8:42::2/64
        node: x1
      role: external
      type: p2p
    - ifindex: 2
      ifname: eth2
      ipv4: 10.1.0.5/30
      ipv6: 2001:db8:42:1::1/64
      linkindex: 2
      mtu: 1500
      name: rtr -> x2
      neighbors:
      - bgp:
          default_originate: true
        ifname: swp1
        ipv4: 10.1.0.6/30
        ipv6: 2001:db8:42:1::2/64
        node: x2
      role: external
      type: p2p
    loopback:
      ifindex: 0
      ifname: lo
      ipv4: 10.0.0.1/32
      neighbors: []
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: eth0
      ipv4: 192.168.121.101
      mac: 08:4f:a9:00:00:01
    module:
    - bgp
    mtu: 1500
    name: rtr
  x1:
    af:
      ipv4: true
      ipv6: true
    bgp:
      _session_clear:
      - 10.1.0.1
      - 2001:db8:42::1
      advertise_loopback: true
      as: 65100
      community:
        ebgp:
        - standard
        - large
        ibgp:
        - standard
        - large
        - extended
        ibgp_localas:
        - standard
        - large
        - extended
      ipv4: true
      ipv6: true
      neighbors:
      - activate:
          ipv4: true
          ipv6: true
        as: 65000
        default_originate: true
        ifindex: 1
        ipv4: 10.1.0.1
        ipv6: 2001:db8:42::1
        name: rtr
        type: ebgp
      next_hop_self: true
      router_id: 10.0.0.10
    box: networkop/cx:4.4.0
    clab:
      binds:
      - clab_files/x1/interfaces:/etc/network/interfaces
      config_templates:
      - interfaces:/etc/network/interfaces
      kind: cvx
      runtime: docker
    config:
    - bgp.session
    device: cumulus
    hostname: clab-ipv6-x1
    id: 10
    interfaces:
    - bgp:
        default_originate: true
      ifindex: 1
      ifname: swp1
      ipv4: 10.1.0.2/30
      ipv6: 2001:db8:42::2/64
      linkindex: 1
      mtu: 1500
      name: x1 -> rtr
      neighbors:
      - ifname: eth1
        ipv4: 10.1.0.1/30
        ipv6: 2001:db8:42::1/64
        node: rtr
      role: external
      type: p2p
    loopback:
      ifindex: 0
      ifname: lo
      ipv4: 192.168.100.1/24
      ipv6: 2001:db8:100:1::1/48
      neighbors: []
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: eth0
      ipv4: 192.168.121.110
      mac: 08:4f:a9:00:00:0a
    module:
    - bgp
    mtu: 1500
    name: x1
  x2:
    af:
      ipv4: true
      ipv6: true
    bgp:
      _session_clear:
      - 10.1.0.5
      - 2001:db8:42:1::1
      advertise_loopback: true
      as: 65101
      community:
        ebgp:
        - standard
        - large
        ibgp:
        - standard
        - large
        - extended
        ibgp_localas:
        - standard
        - large
        - extended
      ipv4: true
      ipv6: true
      neighbors:
      - activate:
          ipv4: true
          ipv6: true
        as: 65000
        default_originate: true
        ifindex: 1
        ipv4: 10.1.0.5
        ipv6: 2001:db8:42:1::1
        name: rtr
        type: ebgp
      next_hop_self: true
      router_id: 10.0.0.11
    box: networkop/cx:4.4.0
    clab:
      binds:
      - clab_files/x2/interfaces:/etc/network/interfaces
      config_templates:
      - interfaces:/etc/network/interfaces
      kind: cvx
      runtime: docker
    config:
    - bgp.session
    device: cumulus
    hostname: clab-ipv6-x2
    id: 11
    interfaces:
    - bgp:
        default_originate: true
      ifindex: 1
      ifname: swp1
      ipv4: 10.1.0.6/30
      ipv6: 2001:db8:42:1::2/64
      linkindex: 2
      mtu: 1500
      name: x2 -> rtr
      neighbors:
      - ifname: eth2
        ipv4: 10.1.0.5/30
        ipv6: 2001:db8:42:1::1/64
        node: rtr
      role: external
      type: p2p
    loopback:
      ifindex: 0
      ifname: lo
      ipv4: 192.168.101.1/24
      ipv6: 2001:db8:101:1::1/48
      neighbors: []
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: eth0
      ipv4: 192.168.121.111
      mac: 08:4f:a9:00:00:0b
    module:
    - bgp
    mtu: 1500
    name: x2
plugin:
- bgp.session
- check_validate
provider: clab
validate:
- description: Check IPv6 EBGP session with RTR on ISP routers
  devices:
  - cumulus
  - eos
  - frr
  fail: The IPv6 EBGP session with your router is not established
  name: session
  nodes:
  - x1
  - x2
  pass: The IPv6 EBGP session with RTR is in Established state
  show:
    cumulus: bgp summary json
    eos: bgp ipv6 unicast summary | json
    frr: bgp summary json
  stop_on_error: true
  valid:
    cumulus: '{% for n in bgp.neighbors if n.name == ''rtr'' %} ipv6Unicast.peers["{{
      n.ipv6 }}"].state == "Established" {% endfor %}

      '
    eos: '{% for n in bgp.neighbors if n.name == ''rtr'' %} vrfs.default.peers["{{
      n.ipv6 }}"].peerState == "Established" {% endfor %}

      '
    frr: '{% for n in bgp.neighbors if n.name == ''rtr'' %} ipv6Unicast.peers["{{
      n.ipv6 }}"].state == "Established" {% endfor %}

      '
- description: Check whether RTR receives and sends IPv6 prefixes
  devices:
  - cumulus
  - eos
  - frr
  fail: RTR is not advertising IPv6 prefixes to ISP routers
  name: pfxcnt
  nodes:
  - x1
  - x2
  pass: RTR is advertising IPv6 prefixes to ISP routers
  show:
    cumulus: '{% for n in bgp.neighbors if n.name == ''rtr'' %} bgp ipv6 neighbors
      {{ n.ipv6 }} routes json {% endfor %}

      '
    eos: '{% for n in bgp.neighbors if n.name == ''rtr'' %} bgp neighbor {{ n.ipv6
      }} ipv6 unicast routes | json {% endfor %}

      '
    frr: '{% for n in bgp.neighbors if n.name == ''rtr'' %} bgp ipv6 neighbors {{
      n.ipv6 }} routes json {% endfor %}

      '
  valid:
    cumulus: routes
    eos: vrfs.default.bgpRouteEntries
    frr: routes
- description: Check whether RTR advertises 2001:db8:1::/48
  devices:
  - cumulus
  - eos
  - frr
  fail: RTR is not advertising 2001:db8:1::/48
  name: advroute
  nodes:
  - x1
  - x2
  pass: RTR is advertising 2001:db8:1::/48 to ISP routers
  show:
    cumulus: bgp ipv6 2001:db8:1::/48 json
    eos: bgp ipv6 unicast 2001:db8:1::/48 | json
    frr: bgp ipv6 2001:db8:1::/48 json
  valid:
    cumulus: prefix
    eos: vrfs.default.bgpRouteEntries
    frr: prefix
version: 1.6.4
